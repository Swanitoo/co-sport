generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime         @default(now())
  plan             Plan             @default(FREE)
  updatedAt        DateTime         @updatedAt
  stripeCustomerId String?
  socialLink       String?
  bio              String?
  city             String?
  country          String?
  sex              String?
  state            String?
  birthDate        DateTime?
  nationality      String?
  profileCompleted Boolean          @default(false)
  isAdmin          Boolean          @default(false)
  accounts         Account[]
  memberships      Membership[]
  products         Product[]
  reviews          Review[]
  sessions         Session[]
  StravaActivity   StravaActivity[]
  messages         Message[]        @relation("UserMessages")
  unreadMessages   UnreadMessage[]
  contactMessages  ContactMessage[]
  feedbacks        Feedback[]
}

model Product {
  id           String       @id @default(cuid())
  name         String
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  enabled      Boolean      @default(true)
  sport        String
  description  String
  level        String
  slug         String       @unique
  venueAddress String?
  venueLat     Float?
  venueLng     Float?
  venueName    String?
  onlyGirls    Boolean      @default(false)
  memberships  Membership[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews      Review[]
  messages     Message[]    @relation("ProductMessages")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  ip         String
  text       String?
  socialLink String?
  name       String?
  image      String?
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  read       Boolean  @default(false)
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  productId String
  status    Status   @default(PENDING)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model StravaActivity {
  id       String   @id
  userId   String
  activity String
  date     DateTime
  distance Float
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String          @id @default(cuid())
  text      String
  userId    String
  productId String
  createdAt DateTime        @default(now())
  replyToId String?         @map("reply_to_id")
  product   Product         @relation("ProductMessages", fields: [productId], references: [id], onDelete: Cascade)
  replyTo   Message?        @relation("MessageReplies", fields: [replyToId], references: [id])
  replies   Message[]       @relation("MessageReplies")
  user      User            @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  unreadBy  UnreadMessage[]

  @@map("messages")
}

model UnreadMessage {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@map("unread_messages")
}

model ContactMessage {
  id        String   @id @default(cuid())
  subject   String
  message   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  feedback  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PREMIUM
}

enum Status {
  PENDING
  APPROVED
  REMOVED
  REFUSED
}
